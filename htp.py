# -*- coding: utf-8 -*-
"""htp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1waV8iCzsv0Zfx7sO1O-AUy0qCOyhskJG
"""

!pip install -U scikit-learn
!pip install --upgrade gupload
!pip install dask==2021.12
!pip install auto-sklearn

import pandas as pd
import seaborn as sns

from pprint import pprint

import sklearn.datasets
import sklearn.metrics

import autosklearn.regression
import matplotlib.pyplot as plt

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from google.colab import drive
from pydrive.auth import GoogleAuth
from google.colab import auth
from google.colab import files

#df_quad = pd.read_csv('/content/drive/MyDrive/GitHub/Industrial-Heat-Transfer-Predictor/SinaisDez2021_Hvariante/processed/df_h_treino.csv')
#df_seno = pd.read_csv('/content/drive/MyDrive/GitHub/Industrial-Heat-Transfer-Predictor/SinaisDez2021_Hvariante/processed/df_h_seno_treino.csv')
#df = pd.concat([df_quad, df_seno], axis = 0)

df_sinal = pd.read_csv('/content/drive/MyDrive/GitHub/Industrial-Heat-Transfer-Predictor/SinaisDez2021_Hvariante/processed/df_seno_treino_128_h.csv')

#df_sinal = df_sinal.sample(frac=1)

df_sinal.head()

X = pd.concat([df_sinal.iloc[:,0:129], df_sinal.iloc[:,130]], axis = 1)

y = df_sinal.iloc[:,129]

y.head()

automl = autosklearn.regression.AutoSklearnRegressor(
    time_left_for_this_task=200*50,
    per_run_time_limit=200,
    memory_limit=None,
    #nao cria emsemble (avarege de diversos modelos)
    ensemble_size = 1,
    initial_configurations_via_metalearning=0,
    #resampling_strategy='cv',
    #resampling_strategy_arguments={'folds': 5},
    n_jobs = -1,
    tmp_folder='/content/drive/MyDrive/GitHub/Industrial-Heat-Transfer-Predictor/SinaisDez2021_Hvariante/modelos_seno',
)
automl.fit(X, y, dataset_name='df_sinal')

print(automl.sprint_statistics()) 
print('full 128 Sinais => 15082')

print(automl.leaderboard())

print(automl.show_models())

df_teste = pd.read_csv('/content/drive/MyDrive/GitHub/Industrial-Heat-Transfer-Predictor/SinaisDez2021_Hvariante/processed/Test/Concatenado/df_seno_teste_128_h.csv')
#df.columns = ['Time','Tproc', 'Tind', 'Trec', 'Tind0', 'Tinf', 'h']

X_test_all = pd.concat([df_teste.iloc[:,0:129], df_teste.iloc[:,130]], axis = 1)

y_test_all = df_teste.iloc[:,129]

train_predictions = automl.predict(X)
print("Train RMSE score:", sklearn.metrics.mean_squared_error(y, train_predictions, squared=True))
test_predictions = automl.predict(X_test_all)
print("Test RMSE score:", sklearn.metrics.mean_squared_error(y_test_all, test_predictions, squared=True))

train_predictions = automl.predict(X)
print("Train R2 score:", sklearn.metrics.r2_score(y, train_predictions))
test_predictions = automl.predict(X_test_all)
print("Test R2 score:", sklearn.metrics.r2_score(y_test_all, test_predictions))

#arquivos_teste = pd.read_csv('/content/drive/MyDrive/GitHub/Industrial-Heat-Transfer-Predictor/SinaisDez2021_Hvariante/processed/arquivos_seno_teste.csv')
#df2 = pd.read_csv('/content/drive/MyDrive/GitHub/Industrial-Heat-Transfer-Predictor/SinaisDez2021_Hvariante/seno/seno_{num}.lvm'.format(num=arquivos_teste['num'].loc[num]), sep ='\s+', header = None, usecols = [0,1,2,3,4,5,9])
#df2.columns = ['Time','Tproc', 'Tind', 'Trec', 'Tind0', 'Tinf', 'h']
num = 17

df2 = pd.read_csv('/content/drive/MyDrive/GitHub/Industrial-Heat-Transfer-Predictor/SinaisDez2021_Hvariante/processed/Test/df_seno_sinal_teste_{num}.csv'.format(num =num))
df2.head()

X_test = pd.concat([df2.iloc[:,0:129], df2.iloc[:,130]], axis = 1)

y_test = df2.iloc[:,129]

tind_plot = df2.iloc[:,131]

X_test.head()

gen_test_predictions = automl.predict(X_test)
print("Test RMSE score:", sklearn.metrics.mean_squared_error(y_test, gen_test_predictions, squared=True))

#gen_test_predictions = automl.predict(df2[['Tind', 'Tind0', 'h']])
#print("Test RMSE score:", sklearn.metrics.mean_squared_error(df2['Tproc'], gen_test_predictions, squared=True))

import numpy as np
plt.figure(1)
plt.plot(gen_test_predictions,label="Prediction", c='green')
plt.plot(y_test, label="y", c='blue')
plt.plot(tind_plot, label = 'Tind', c = 'red')

plt.figure(2)
plot_x = np.arange(0,896)
plt.scatter(plot_x,gen_test_predictions,label="Prediction", c='green')
plt.scatter(plot_x,y_test, label="y", c='blue')
plt.scatter(plot_x,tind_plot, label = 'Tind', c = 'red')

#plt.plot(df2[['Trec']], label="y", c='red')
#plt.plot(df2[['Tind', 'Tind0']], label="y", c='red')
#plt.plot(df2[['Tproc']],label="Prediction", c='blue')

plt.hist(X.iloc[:,-1], color = 'blue', edgecolor = 'black',
         bins = int(180/5))
plt.figure(2)
plt.hist(X_test.iloc[:,-1], color = 'blue', edgecolor = 'black',
         bins = int(180/5))